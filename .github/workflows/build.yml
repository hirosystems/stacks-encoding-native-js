name: build

on:
  push:
  workflow_dispatch:
    inputs:
      npm-package-version:
        description: Specify the package.json npm package version, e.g. `0.0.1-alpha.0`
        required: true
      npm-package-tag:
        description: Specify the tag to be used for npm publish, e.g. `latest`, `beta`, `alpha`
        required: true
      include-linux-arm64-musl:
        description: 'Build the linux-arm64-musl artifact, can take up to 2 hours'
        required: true 
        type: boolean
        default: true

jobs:
  cancel-previous-runs:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

  build_linux-x64-musl:
    runs-on: ubuntu-latest
    container:
      image: rust:alpine
    steps:
      - uses: actions/checkout@v2
      - name: Install deps
        run: apk add alpine-sdk git nodejs npm
      - name: npm i
        run: npm i
      - name: Build
        run: npm run build:cargo
      - uses: actions/upload-artifact@v2
        with:
          name: linux-x64-musl
          path: native/linux-x64-musl.node
          if-no-files-found: error

  build_linux-arm64-musl:
    runs-on: ubuntu-latest
    env:
      INCLUDE_BUILD: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.include-linux-arm64-musl == 'true' }}
    steps:
      - uses: actions/checkout@v2
        # if: ${{ env.INCLUDE_BUILD == 'true' }}
      - name: Run on architecture
        # if: ${{ env.INCLUDE_BUILD == 'true' }}
        uses: uraimo/run-on-arch-action@v2.2.0
        with:
          arch: aarch64
          distro: alpine_latest
          # githubToken: ${{ github.token }}
          setup: |
            mkdir -p "${PWD}/artifacts"
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"
          shell: /bin/ash
          install: |
            apk update
            apk add alpine-sdk git rustup
            rustup-init -y --profile minimal
          # source $HOME/.cargo/env
          # cargo fetch --target aarch64-unknown-linux-musl --verbose
          # Produce a binary artifact and place it in the mounted volume
          run: |
            source $HOME/.cargo/env
            cargo fetch --target aarch64-unknown-linux-musl --verbose
            cargo build --release --offline --verbose
            cp target/release/libstacks_encoding_native_js.so /artifacts/linux-arm64-musl.node
      - uses: actions/upload-artifact@v2
        # if: ${{ env.INCLUDE_BUILD == 'true' }}
        with:
          name: linux-arm64-musl
          path: artifacts/linux-arm64-musl.node
          if-no-files-found: error

  build_linux-arm64-musl_old:
    if: ${{ false }} # disabled, this compiles but the binary does not load correctly
    runs-on: ubuntu-latest
    container:
      image: rust:alpine
    steps:
      - uses: actions/checkout@v2
      - name: Install deps
        run: apk add alpine-sdk git nodejs npm
      - name: Install rustup aarch64-unknown-linux-musl target
        run: rustup target add aarch64-unknown-linux-musl
      - name: Configure linux-arm64-musl cross compile
        run: |
          curl -O https://musl.cc/aarch64-linux-musl-cross.tgz
          tar xf aarch64-linux-musl-cross.tgz
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=$(pwd)/aarch64-linux-musl-cross/bin/aarch64-linux-musl-gcc" >> $GITHUB_ENV
          echo "CC=$(pwd)/aarch64-linux-musl-cross/bin/aarch64-linux-musl-gcc" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_musl=$(pwd)/aarch64-linux-musl-cross/bin/aarch64-linux-musl-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_musl=$(pwd)/aarch64-linux-musl-cross/bin/aarch64-linux-musl-g++" >> $GITHUB_ENV
          echo "TARGET_ARCH=arm64" >> $GITHUB_ENV
      - name: npm i
        run: npm i
      - name: Build
        run: npm run build:cargo
      - uses: actions/upload-artifact@v2
        with:
          name: linux-arm64-musl
          path: native/linux-arm64-musl.node
          if-no-files-found: error

  build_linux-x64-glibc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: npm i
        run: npm i
      - name: Build
        run: npm run build:cargo
      - uses: actions/upload-artifact@v2
        with:
          name: linux-x64-glibc
          path: native/linux-x64-glibc.node
          if-no-files-found: error

  build_linux-arm64-glibc:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          target: aarch64-unknown-linux-gnu
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Install cross compile deps
        run: |
          sudo apt-get update && sudo apt-get install -y g++-aarch64-linux-gnu libc6-dev-arm64-cross gcc-aarch64-linux-gnu qemu-user
      - name: Configure linux-arm64 cross compile
        run: |
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo 'CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_RUNNER="qemu-aarch64 -L /usr/aarch64-linux-gnu"' >> $GITHUB_ENV
          echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "TARGET_ARCH=arm64" >> $GITHUB_ENV
      - name: npm i
        run: npm i
      - name: Build
        run: npm run build:cargo
      - uses: actions/upload-artifact@v2
        with:
          name: linux-arm64-glibc
          path: native/linux-arm64-glibc.node
          if-no-files-found: error

  build_win-x64:
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: npm i
        run: npm i
      - name: Build
        run: npm run build:cargo
      - uses: actions/upload-artifact@v2
        with:
          name: win32-x64
          path: native/win32-x64.node
          if-no-files-found: error

  build_darwin-x64:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: npm i
        run: npm i
      - name: Build
        run: npm run build:cargo
      - uses: actions/upload-artifact@v2
        with:
          name: darwin-x64
          path: native/darwin-x64.node
          if-no-files-found: error

  build_darwin-arm64:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          target: aarch64-apple-darwin
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Configure macos-arm64 cross compile
        run: |
          echo "SDKROOT=$(xcrun -sdk macosx --show-sdk-path)" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx --show-sdk-platform-version)" >> $GITHUB_ENV
          echo "TARGET_ARCH=arm64" >> $GITHUB_ENV
      - name: npm i
        run: npm i
      - name: Build
        run: npm run build:cargo
      - uses: actions/upload-artifact@v2
        with:
          name: darwin-arm64
          path: native/darwin-arm64.node
          if-no-files-found: error

  npm-package:
    runs-on: ubuntu-latest
    needs:
      - build_linux-x64-musl
      - build_linux-arm64-musl
      - build_linux-x64-glibc
      - build_linux-arm64-glibc
      - build_win-x64
      - build_darwin-x64
      - build_darwin-arm64
    env:
      NPM_PACKAGE_VERSION: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.npm-package-version || '0.0.1-alpha.0' }}
      NPM_PACKAGE_TAG: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.npm-package-tag || 'alpha' }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
          registry-url: https://registry.npmjs.org
          always-auth: true
      - uses: actions/download-artifact@v3
        with:
          path: native
      - name: Position downloaded artifacts
        run: |
          mkdir -p ./native
          find ./native -mindepth 2 -type f -exec mv -t ./native -i '{}' +
          find ./native -mindepth 1 -type d -empty -delete
          ls -R ./native
      - name: npm version
        run: npm version --git-tag-version=false --allow-same-version $NPM_PACKAGE_VERSION
      - name: npm build
        run: |
          npm i
          npm run build:ts
      - name: npm pack
        run: |
          npm pack
          mv "stacks-encoding-native-js-$NPM_PACKAGE_VERSION.tgz" "stacks-encoding-native-js.tgz"
      - uses: actions/upload-artifact@v2
        with:
          name: stacks-encoding-native-js.tgz
          path: stacks-encoding-native-js.tgz
          if-no-files-found: error
      - name: Publish npm package
        if: github.event_name == 'workflow_dispatch'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish stacks-encoding-native-js.tgz --tag $NPM_PACKAGE_TAG --access public
